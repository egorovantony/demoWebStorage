1. Для открытия и ведения проекта скачай приложение WebStorm и открой в нем проект. И запускай файлы в браузере из 
этого приложения, иначе приложение работать не будет.
2. Проект организован следующим образом:
В папке самого проекта находятся html файлы, сами по себе они все идентичны, 
конечное содержимое формируется в коде javascript при открытии соответствующего файла в браузере. 
В папке templates находятся шаблонные блоки, которые и вставляются в файл при его открытии.
В папке css находятся касадные стили.
В папке img - картинки проекта в векторном формате svg.
В папке js - javascript код.
Вообще, данный проект не типичный, так как обычно динамическое содержимое (в данном случе это вставка шаблонов из папки templates)
формируется на стороне сервера на таких языках как PHP, Java, Python и т.д. В данном случае хотя сайт и является динамическим, 
но все содержание формируется на стороне клиента и база данных тоже используется на стороне клиента, т.е. сайту не нужен сервер.
Это сделано специально, чтобы не усложнять данный проект серверным содержым. В проекте используются такие технологии 
как HTML, CSS и JavaScript, также используются библиотека CSS Bootstrap и библиотека JS JQuery.
3. Ознакомься вообще что такое HTML, CSS, JavaScript. Разберись по данному проекту как формируется HTML, CSS. В CSS имеет смысл
посмотрет файл styles.css, эти стили писал я сам, ну или дополнял стили bootstrap. Почитай что такое Bootstrap - по сути это 
библиотека шаблонов CSS стилей. Сам файл bootstrap.css просматривать полностью пока нет смысла, так как он большой, если
только смотреть конкретные стили, которые используются в проекте. Почитай что такое селекторы CSS, они использутся в
дальнейшем в JS-коде.
4. Разберись как формируются страницы и вставляются шаблоны при помощи JS-кода, в данном случае нас интересует файл customer.js,
остальные файла просматривать также нет смыслы, это импортированные библиотки Bootstrap и JQuery. Почитай вкратце что такое
JQuery. Для этого можно использовать в браузере Chrome инструмент разработчика "Developer tools", 
для этого нужно простой зайти More tools-> Developer tools. Там можно просматривать код js(вкладка Sources) и ставить точки
прерывания для отладки. Просматривать содержимое html-файла(вкладка Elements), просматривать содержимое встроенной базы данных
(Вкладка Application->Local Storage).
5. В данном проекте используется встроенная в браузер база данных Web Storage типа ключ/значение. Посмотри как хранятся данные
в подобной БД в сравнении, например, с реляционной БД. При первом запуске я написал функцию первоначальной инициализации,
будет создан пользователь test с паролем 123456 и создана запись персоны. Ты можешь это увидеть в инструментах разработчика.
Так как это не реляционная БД, то доступ может осуществляться только по ключу, т.е. нужно всегда знать ключ, для этого
в БД хранится строка ключей, чтобы можно было вытащить все записи по конкретному классу объектов. Например, в записи
с ключом user-keys будут храниться все ключи существующих объектов User, а сами объекты User будут храниться под ключами
user-1 .... user-n, при этом текущий индекс k от user-k будет храниться в записи user-curr-key. При добавлении новой записи 
пользователя будет определен новый индекс k + 1 и в user-keys добавится ключ  user-k+1, текущий индекс user-curr-key также 
увеличится на 1. При удалении записи пользователя будет удален соответствующий ключ из user-keys(удаление пользователя
пока не предусмотрено, запись пока можно удалить только из инструмента разработчика). Каждый объект хранится в формате 
JSON, посмотри что за это формат и как выполняется преобразование в JS-коде объекта в строку JSON и обратно. 
Описанным образом будут функционировать все объекты в БД (user, person, contact).
6. Запуск приложения на телефоне. Для запуска приложения на телефоне нужно установить на телефон веб-сервер. Я опробовал несколько
приложений, наиболее стабильно работает приложение Сервер для PHP от Tautvydas Andrikys. Скачай это приложение и закинь папку с
проектом в папку www/public, которую создаст данное приложение. Запусти сайт по адресу localhost:8080/demoWebSQL/index.html;
Можно также отлаживать приложение на компьютере при подключении телефона, если что-то не работает. Для этого нужно зайти в свой аккаунт 
gmail.com на компьютере и в инструментах разработчика перейти по пути More tools-> Remote devices. Вот есть описывающая ссылка: 
https://developers.google.com/web/tools/chrome-devtools/remote-debugging/?utm_source=dcc&utm_medium=redirect&utm_campaign=2016q3
7. После того, как ты разберешься как работает приложение, нужно будет сделать некоторые доработки:
- Создать страницу редактирования Контакта, Вывода списка всех контактов, Вывода списка контактов к конкретной персоне(на странице 
списка персон сейчас есть ссылка на контакты, но она не рабочая, т.е. нужно ее превратить в рабочую);
- Доработать функцию init на конструкцию switch, так как там сейчас очень много единообразных условий, для каждого узла switch создать
отдельную функцию. 
- Наиболее часто используемые литеры преобразовать в константы и вынести в самое начало JS-кода, например, очень часто используется 
литерал "user" в качестве префикса ключа. Создаем константу var DB_PREF_USER = "user" и используем уже не литерал, а константу.
- Сейчас при переходе к редактированию пользователя используется хранилище сессии, чтобы сохранить ключ пользователя 
(sessionStorage.setItem) (посмотри в чем разница между local storage и session storage), а затем уже при переходе к странице 
редактирования вытаскивается оттуда ключ и считывается пользователь. Нужно будет переделать этот механизм на передачу с использованием get запроса. 
Посмотри чем get запрос отличается от post. Изначально я делал на основе именно get запроса, но веб-сервер
на телефоне не поддерживал get запросы, поэтому пришлось немного переделать. Тот веб-сервер, который я тебе указал, должен поддерживать.
Т.е. последовательность такая: сначала при формировании списка персон, там где указыватся ссылка на страницу редактирования,
нужно будет добавить к уже имеющейся ссылке person_edit.html строку ?person=person-n, где person-n - это ключ текущей записи
в списке(n будет какое-то реально число), а при открытии страницы редактирования парсить строку, функцию для парсинга я уже написал.



